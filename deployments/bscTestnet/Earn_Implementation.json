{
  "address": "0x57DCAc9d0f8Cd7FC4E28F8f33EA90C0732a482B7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "nativeWrapped",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "timelockAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "withdrawVault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "ERC1967InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC1967NonPayable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UUPSUnauthorizedCallContext",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "slot",
          "type": "bytes32"
        }
      ],
      "name": "UUPSUnsupportedProxiableUUID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assTokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sourceTokenAddress",
          "type": "address"
        }
      ],
      "name": "AddToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "assTokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sourceTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sourceTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestWithdrawNo",
          "type": "uint256"
        }
      ],
      "name": "ClaimWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assTokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sourceTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sourceTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestWithdrawNo",
          "type": "uint256"
        }
      ],
      "name": "DistributeWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sourceTokenAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "assTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assXXXAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assToSourceExchangeRate",
          "type": "uint256"
        }
      ],
      "name": "MintAssXXX",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "assTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestWithdrawNo",
          "type": "uint256"
        }
      ],
      "name": "RequestWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sourceTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sourceTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "ceffuAddress",
          "type": "address"
        }
      ],
      "name": "TransferToCeffu",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldCeffuAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newCeffuAddress",
          "type": "address"
        }
      ],
      "name": "UpdateCeffuAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "oldDepositEnabled",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newDepositEnabled",
          "type": "bool"
        }
      ],
      "name": "UpdateDepositEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "oldTransferToCeffuEnabled",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newTransferToCeffuEnabled",
          "type": "bool"
        }
      ],
      "name": "UpdateTransferToCeffuEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "oldWithdrawEnabled",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newWithdrawEnabled",
          "type": "bool"
        }
      ],
      "name": "UpdateWithdrawEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "assTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assToSourceExchangeRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exchangeRateExpiredTimestamp",
          "type": "uint256"
        }
      ],
      "name": "UploadExchangeRate",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BOT_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NATIVE_WRAPPED",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSE_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TIMELOCK_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPGRADE_INTERFACE_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAW_VAULT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sourceTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ceffuAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "exchangeRateExpiredTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "depositEnabled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "withdrawEnabled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "transferToCeffuEnabled",
          "type": "bool"
        }
      ],
      "name": "addToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        }
      ],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "requestWithdrawNos",
          "type": "uint256[]"
        }
      ],
      "name": "claimWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sourceTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositNative",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "assTokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sourceTokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "requestWithdrawNo",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "receipt",
              "type": "address"
            }
          ],
          "internalType": "struct Earn.DistributeWithdrawInfo[]",
          "name": "distributeWithdrawInfoList",
          "type": "tuple[]"
        }
      ],
      "name": "distributeWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "defaultAdmin",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "requestWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestWithdrawMaxNo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestWithdraws",
      "outputs": [
        {
          "internalType": "address",
          "name": "assTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sourceTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "applyTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "canClaimWithdraw",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supportAssToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "assTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "sourceTokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "sourceTokenDecimals",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "assToSourceExchangeRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "exchangeRateExpiredTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "depositEnabled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "withdrawEnabled",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "ceffuAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "transferToCeffuEnabled",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supportSourceToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assTokenAddressList",
          "type": "address[]"
        }
      ],
      "name": "transferToCeffu",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ceffuAddress",
          "type": "address"
        }
      ],
      "name": "updateCeffuAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assTokenAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "updateDepositEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assTokenAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "updateTransferToCeffuEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assTokenAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "updateWithdrawEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "assTokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "assToSourceExchangeRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "exchangeRateExpiredTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct Earn.ExchangeRateInfo[]",
          "name": "exchangeRateInfoList",
          "type": "tuple[]"
        }
      ],
      "name": "uploadExchangeRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x631c995a098ddd9761d54fdc93aebcfb9a67b893a63ab3cfc2eca29aaf70e21a",
  "receipt": {
    "to": null,
    "from": "0xf4903f4544558515b26ec4C6D6e91D2293b27275",
    "contractAddress": "0x57DCAc9d0f8Cd7FC4E28F8f33EA90C0732a482B7",
    "transactionIndex": 3,
    "gasUsed": "3222673",
    "logsBloom": "0x
    "blockHash": "0x7fdb223b0f022427e17aa672f1727563d455654ee717aabfbebf890ddb718667",
    "transactionHash": "0x631c995a098ddd9761d54fdc93aebcfb9a67b893a63ab3cfc2eca29aaf70e21a",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 43781506,
        "transactionHash": "0x631c995a098ddd9761d54fdc93aebcfb9a67b893a63ab3cfc2eca29aaf70e21a",
        "address": "0x57DCAc9d0f8Cd7FC4E28F8f33EA90C0732a482B7",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 3,
        "blockHash": "0x7fdb223b0f022427e17aa672f1727563d455654ee717aabfbebf890ddb718667"
      }
    ],
    "blockNumber": 43781506,
    "cumulativeGasUsed": "3409169",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd",
    "0xeA877D3d59e4c420426DA4EE04c0aC40c67aF664",
    "0x1B2827e2E400dc7d6eAC5333c28bBD8a6E073475"
  ],
  "numDeployments": 1,
  "solcInputHash": "1e72d9be8fe3592e3499a5e49562c94e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nativeWrapped\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"timelockAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawVault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sourceTokenAddress\",\"type\":\"address\"}],\"name\":\"AddToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sourceTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestWithdrawNo\",\"type\":\"uint256\"}],\"name\":\"ClaimWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sourceTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestWithdrawNo\",\"type\":\"uint256\"}],\"name\":\"DistributeWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sourceTokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assXXXAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assToSourceExchangeRate\",\"type\":\"uint256\"}],\"name\":\"MintAssXXX\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestWithdrawNo\",\"type\":\"uint256\"}],\"name\":\"RequestWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sourceTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"ceffuAddress\",\"type\":\"address\"}],\"name\":\"TransferToCeffu\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldCeffuAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCeffuAddress\",\"type\":\"address\"}],\"name\":\"UpdateCeffuAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldDepositEnabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newDepositEnabled\",\"type\":\"bool\"}],\"name\":\"UpdateDepositEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldTransferToCeffuEnabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newTransferToCeffuEnabled\",\"type\":\"bool\"}],\"name\":\"UpdateTransferToCeffuEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldWithdrawEnabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newWithdrawEnabled\",\"type\":\"bool\"}],\"name\":\"UpdateWithdrawEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"assTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assToSourceExchangeRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exchangeRateExpiredTimestamp\",\"type\":\"uint256\"}],\"name\":\"UploadExchangeRate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BOT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NATIVE_WRAPPED\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIMELOCK_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_VAULT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sourceTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ceffuAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRateExpiredTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"depositEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"withdrawEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"transferToCeffuEnabled\",\"type\":\"bool\"}],\"name\":\"addToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"requestWithdrawNos\",\"type\":\"uint256[]\"}],\"name\":\"claimWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sourceTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sourceTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestWithdrawNo\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receipt\",\"type\":\"address\"}],\"internalType\":\"struct Earn.DistributeWithdrawInfo[]\",\"name\":\"distributeWithdrawInfoList\",\"type\":\"tuple[]\"}],\"name\":\"distributeWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"defaultAdmin\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assTokenAmount\",\"type\":\"uint256\"}],\"name\":\"requestWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestWithdrawMaxNo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestWithdraws\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"assTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sourceTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"applyTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canClaimWithdraw\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportAssToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"assTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sourceTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"sourceTokenDecimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"assToSourceExchangeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRateExpiredTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"depositEnabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"withdrawEnabled\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"ceffuAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"transferToCeffuEnabled\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportSourceToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assTokenAddressList\",\"type\":\"address[]\"}],\"name\":\"transferToCeffu\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ceffuAddress\",\"type\":\"address\"}],\"name\":\"updateCeffuAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assTokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"updateDepositEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assTokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"updateTransferToCeffuEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assTokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"updateWithdrawEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"assTokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assToSourceExchangeRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRateExpiredTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct Earn.ExchangeRateInfo[]\",\"name\":\"exchangeRateInfoList\",\"type\":\"tuple[]\"}],\"name\":\"uploadExchangeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Earn.sol\":\"Earn\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6662ec4e5cefca03eeadd073e9469df8d2944bb2ee8ec8f7622c2c46aab5f225\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/extensions/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControlEnumerable} from \\\"@openzeppelin/contracts/access/extensions/IAccessControlEnumerable.sol\\\";\\nimport {AccessControlUpgradeable} from \\\"../AccessControlUpgradeable.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerable, AccessControlUpgradeable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControlEnumerable\\n    struct AccessControlEnumerableStorage {\\n        mapping(bytes32 role => EnumerableSet.AddressSet) _roleMembers;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControlEnumerable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlEnumerableStorageLocation = 0xc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e82371705932000;\\n\\n    function _getAccessControlEnumerableStorage() private pure returns (AccessControlEnumerableStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlEnumerableStorageLocation\\n        }\\n    }\\n\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual returns (address) {\\n        AccessControlEnumerableStorage storage $ = _getAccessControlEnumerableStorage();\\n        return $._roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual returns (uint256) {\\n        AccessControlEnumerableStorage storage $ = _getAccessControlEnumerableStorage();\\n        return $._roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {AccessControl-_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override returns (bool) {\\n        AccessControlEnumerableStorage storage $ = _getAccessControlEnumerableStorage();\\n        bool granted = super._grantRole(role, account);\\n        if (granted) {\\n            $._roleMembers[role].add(account);\\n        }\\n        return granted;\\n    }\\n\\n    /**\\n     * @dev Overload {AccessControl-_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override returns (bool) {\\n        AccessControlEnumerableStorage storage $ = _getAccessControlEnumerableStorage();\\n        bool revoked = super._revokeRole(role, account);\\n        if (revoked) {\\n            $._roleMembers[role].remove(account);\\n        }\\n        return revoked;\\n    }\\n}\\n\",\"keccak256\":\"0xc603154d2a4d8f88d4d3c11090a8224f572c4b1f8baced3ea46cdec49f4674ee\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f13b947637c4969c0644cab4ef399cdc4b67f101463b8775c5a43b118558e53\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x92915b7f7f642c6be3f65bfd1522feb5d5b6ef25f755f4dbb51df32c868f2f97\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/extensions/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"../IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc1435f102633849858e75d7bed14c636f25448ceb3406d82992b0f2df52f4306\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x85a45f3f10014a0f8be41157a32b6a5f905753ea64a4b64e29fc12b7deeecf39\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ECDSA} from \\\"./ECDSA.sol\\\";\\nimport {IERC1271} from \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Safe Wallet (previously Gnosis Safe).\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error, ) = ECDSA.tryRecover(hash, signature);\\n        return\\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\\n            isValidERC1271SignatureNow(signer, hash, signature);\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC1271.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeCall(IERC1271.isValidSignature, (hash, signature))\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0x6b11eb41a228cca35d4b662b4df69fcd75192851365102690f57b2ac01e83fe6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/Earn.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/extensions/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport {ZERO, ONE, UC, uc, into} from \\\"unchecked-counter/src/UC.sol\\\";\\nimport \\\"./interface/IAss.sol\\\";\\nimport \\\"./interface/IWithdrawVault.sol\\\";\\n\\n\\ncontract Earn is Initializable, PausableUpgradeable, AccessControlEnumerableUpgradeable, UUPSUpgradeable, ReentrancyGuardUpgradeable {\\n\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant PAUSE_ROLE = keccak256(\\\"PAUSE_ROLE\\\");\\n    bytes32 public constant BOT_ROLE = keccak256(\\\"BOT_ROLE\\\");\\n\\n\\n    using Address for address payable;\\n    using SafeERC20 for IERC20;\\n\\n    event AddToken(address indexed assTokenAddress, address indexed sourceTokenAddress);\\n    event UpdateDepositEnabled(address indexed assTokenAddress, bool oldDepositEnabled, bool newDepositEnabled);\\n    event UpdateWithdrawEnabled(address indexed assTokenAddress, bool oldWithdrawEnabled, bool newWithdrawEnabled);\\n    event UpdateCeffuAddress(address indexed assTokenAddress, address oldCeffuAddress, address newCeffuAddress);\\n    event UpdateTransferToCeffuEnabled(address indexed assTokenAddress, bool oldTransferToCeffuEnabled, bool newTransferToCeffuEnabled);\\n    event MintAssXXX(address indexed sender, address indexed sourceTokenAddress, address indexed assTokenAddress, uint256 amountIn, uint256 assXXXAmount, uint256 assToSourceExchangeRate);\\n    event TransferToCeffu(address indexed sourceTokenAddress, uint256 sourceTokenAmount, address ceffuAddress);\\n    event UploadExchangeRate(address indexed assTokenAddress, uint256 assToSourceExchangeRate, uint256 exchangeRateExpiredTimestamp);\\n    event RequestWithdraw(address indexed sender, address indexed assTokenAddress, uint256 assTokenAmount, uint256 requestWithdrawNo);\\n    event DistributeWithdraw(address indexed assTokenAddress, address indexed sourceTokenAddress, uint256 assTokenAmount, uint256 sourceTokenAmount, uint256 requestWithdrawNo);\\n    event ClaimWithdraw(address indexed sender, address indexed assTokenAddress, address indexed sourceTokenAddress, uint256 assTokenAmount, uint256 sourceTokenAmount, uint256 requestWithdrawNo);\\n\\n\\n    struct Token {\\n        //assTokenDecimals=18\\n        address assTokenAddress;\\n        address sourceTokenAddress;\\n        uint8 sourceTokenDecimals;\\n        //assToSourceExchangeRate Decimals=8;assToSourceExchangeRate= XXX amount/(assXXX total supply)\\n        uint256 assToSourceExchangeRate;\\n        uint256 exchangeRateExpiredTimestamp;\\n        bool depositEnabled;\\n        bool withdrawEnabled;\\n        address ceffuAddress;\\n        bool transferToCeffuEnabled;\\n    }\\n\\n    struct ExchangeRateInfo {\\n        address assTokenAddress;\\n        uint256 assToSourceExchangeRate;\\n        uint256 exchangeRateExpiredTimestamp;\\n    }\\n\\n    struct DistributeWithdrawInfo {\\n        address assTokenAddress;\\n        uint256 sourceTokenAmount;\\n        uint256 requestWithdrawNo;\\n        address receipt;\\n    }\\n\\n    struct RequestWithdrawInfo {\\n        address assTokenAddress;\\n        uint256 assTokenAmount;\\n        uint256 sourceTokenAmount;\\n        uint256 applyTimestamp;\\n        bool canClaimWithdraw;\\n    }\\n\\n\\n    address public immutable TIMELOCK_ADDRESS;\\n    address public immutable  NATIVE_WRAPPED;\\n    address public immutable WITHDRAW_VAULT;\\n\\n    mapping(address => Token) public supportAssToken;\\n    mapping(address => address) public supportSourceToken;\\n    mapping(address => mapping(uint256 => RequestWithdrawInfo)) public requestWithdraws;\\n\\n    uint256 public requestWithdrawMaxNo;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address nativeWrapped, address timelockAddress, address withdrawVault) {\\n        require(nativeWrapped != address(0), \\\"nativeWrapped cannot be a zero address\\\");\\n        require(timelockAddress != address(0), \\\"timelockAddress cannot be a zero address\\\");\\n        require(withdrawVault != address(0), \\\"withdrawVault cannot be a zero address\\\");\\n\\n        NATIVE_WRAPPED = nativeWrapped;\\n        TIMELOCK_ADDRESS = timelockAddress;\\n        WITHDRAW_VAULT = withdrawVault;\\n        _disableInitializers();\\n    }\\n\\n    modifier onlyTImelock() {\\n        require(msg.sender == TIMELOCK_ADDRESS, \\\"only timelock\\\");\\n        _;\\n    }\\n\\n    function initialize(address defaultAdmin) initializer public {\\n        __Pausable_init();\\n        __AccessControlEnumerable_init();\\n        __UUPSUpgradeable_init();\\n        __ReentrancyGuard_init();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, TIMELOCK_ADDRESS);\\n        _grantRole(ADMIN_ROLE, defaultAdmin);\\n        _grantRole(PAUSE_ROLE, defaultAdmin);\\n    }\\n\\n    function pause() external onlyRole(PAUSE_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyRole(PAUSE_ROLE) {\\n        _unpause();\\n    }\\n\\n    function _authorizeUpgrade(address newImplementation) internal onlyTImelock override {}\\n\\n    function addToken(\\n        address assTokenAddress,\\n        address sourceTokenAddress,\\n        address ceffuAddress,\\n        uint256 exchangeRateExpiredTimestamp,\\n        bool depositEnabled,\\n        bool withdrawEnabled,\\n        bool transferToCeffuEnabled\\n    ) external onlyRole(ADMIN_ROLE) {\\n        require(assTokenAddress != address(0), \\\"assTokenAddress cannot be a zero address\\\");\\n        require(sourceTokenAddress != address(0), \\\"sourceTokenAddress cannot be a zero address\\\");\\n        require(ceffuAddress != address(0), \\\"ceffuAddress cannot be a zero address\\\");\\n\\n        uint8 correctDecimals = IERC20Metadata(sourceTokenAddress).decimals();\\n\\n        Token storage token = supportAssToken[assTokenAddress];\\n        require(token.assTokenAddress == address(0), \\\"duplicate add\\\");\\n        require(supportSourceToken[sourceTokenAddress] == address(0), \\\"duplicate add\\\");\\n\\n        token.assTokenAddress = assTokenAddress;\\n        token.sourceTokenAddress = sourceTokenAddress;\\n        token.ceffuAddress = ceffuAddress;\\n        token.sourceTokenDecimals = correctDecimals;\\n        token.assToSourceExchangeRate = 1e8;\\n        token.exchangeRateExpiredTimestamp = exchangeRateExpiredTimestamp;\\n        token.depositEnabled = depositEnabled;\\n        token.withdrawEnabled = withdrawEnabled;\\n        token.transferToCeffuEnabled = transferToCeffuEnabled;\\n\\n        supportSourceToken[token.sourceTokenAddress] = assTokenAddress;\\n\\n        emit AddToken(assTokenAddress, sourceTokenAddress);\\n    }\\n\\n    function updateDepositEnabled(address assTokenAddress, bool enabled) external onlyRole(ADMIN_ROLE) {\\n        require(assTokenAddress != address(0), \\\"assTokenAddress cannot be a zero address\\\");\\n\\n        Token storage token = supportAssToken[assTokenAddress];\\n        require(token.assTokenAddress != address(0), \\\"not exist\\\");\\n\\n        bool oldDepositEnabled = token.depositEnabled;\\n        require(oldDepositEnabled != enabled, \\\"newDepositEnabled can not be equal oldDepositEnabled\\\");\\n\\n        token.depositEnabled = enabled;\\n\\n        emit UpdateDepositEnabled(assTokenAddress, oldDepositEnabled, token.depositEnabled);\\n    }\\n\\n    function updateWithdrawEnabled(address assTokenAddress, bool enabled) external onlyRole(ADMIN_ROLE) {\\n        require(assTokenAddress != address(0), \\\"assTokenAddress cannot be a zero address\\\");\\n\\n        Token storage token = supportAssToken[assTokenAddress];\\n        require(token.assTokenAddress != address(0), \\\"not exist\\\");\\n\\n        bool oldWithdrawEnabled = token.withdrawEnabled;\\n        require(oldWithdrawEnabled != enabled, \\\"newWithdrawEnabled can not be equal oldWithdrawEnabled\\\");\\n\\n        token.withdrawEnabled = enabled;\\n\\n        emit UpdateWithdrawEnabled(assTokenAddress, oldWithdrawEnabled, token.withdrawEnabled);\\n    }\\n\\n    function updateCeffuAddress(address assTokenAddress, address ceffuAddress) external onlyRole(ADMIN_ROLE) {\\n        require(assTokenAddress != address(0), \\\"assTokenAddress cannot be a zero address\\\");\\n        require(ceffuAddress != address(0), \\\"ceffuAddress cannot be a zero address\\\");\\n\\n        Token storage token = supportAssToken[assTokenAddress];\\n        require(token.assTokenAddress != address(0), \\\"not exist\\\");\\n\\n        address oldCeffuAddress = token.ceffuAddress;\\n        require(oldCeffuAddress != ceffuAddress, \\\"newCeffuAddress can not be equal oldCeffuAddress\\\");\\n\\n        token.ceffuAddress = ceffuAddress;\\n\\n        emit UpdateCeffuAddress(assTokenAddress, oldCeffuAddress, token.ceffuAddress);\\n    }\\n\\n    function updateTransferToCeffuEnabled(address assTokenAddress, bool enabled) external onlyRole(ADMIN_ROLE) {\\n        require(assTokenAddress != address(0), \\\"assTokenAddress cannot be a zero address\\\");\\n\\n        Token storage token = supportAssToken[assTokenAddress];\\n        require(token.assTokenAddress != address(0), \\\"not exist\\\");\\n\\n        bool oldTransferToCeffuEnabled = token.transferToCeffuEnabled;\\n        require(oldTransferToCeffuEnabled != enabled, \\\"newTransferToCeffuEnabled can not be equal oldTransferToCeffuEnabled\\\");\\n\\n        token.transferToCeffuEnabled = enabled;\\n\\n        emit UpdateTransferToCeffuEnabled(assTokenAddress, oldTransferToCeffuEnabled, token.transferToCeffuEnabled);\\n    }\\n\\n    function deposit(address sourceTokenAddress, uint256 amountIn) external nonReentrant whenNotPaused {\\n        _mintAssXXX(sourceTokenAddress, amountIn);\\n    }\\n\\n    function depositNative() external payable nonReentrant whenNotPaused {\\n        uint256 amount = msg.value;\\n        _mintAssXXX(NATIVE_WRAPPED, amount);\\n    }\\n\\n    function _mintAssXXX(address sourceTokenAddress, uint256 amountIn) private {\\n        require(sourceTokenAddress != address(0), \\\"sourceTokenAddress cannot be a zero address\\\");\\n        require(amountIn > 0, \\\"invalid amount\\\");\\n\\n        address assTokenAddress = supportSourceToken[sourceTokenAddress];\\n        require(assTokenAddress != address(0), \\\"currency not support\\\");\\n\\n        Token storage token = supportAssToken[assTokenAddress];\\n        require(token.depositEnabled == true, \\\"pause deposit\\\");\\n        require(block.timestamp < token.exchangeRateExpiredTimestamp, \\\"exchange rate expired\\\");\\n\\n        amountIn = _transferToVault(msg.sender, sourceTokenAddress, amountIn);\\n\\n        //assToSourceExchangeRate=token.assToSourceExchangeRate # XXX amount/(assXXX total supply)\\n        //assXXXAmount=1/(assToSourceExchangeRate/1e8) * amountIn/(10 ** token.sourceTokenDecimals) * 1e18\\n        uint256 assXXXAmount = amountIn * 1e26 / (token.assToSourceExchangeRate * (10 ** token.sourceTokenDecimals));\\n\\n        IAss(assTokenAddress).mint(msg.sender, assXXXAmount);\\n        emit MintAssXXX(msg.sender, sourceTokenAddress, token.assTokenAddress, amountIn, assXXXAmount, token.assToSourceExchangeRate);\\n    }\\n\\n    function transferToCeffu(address[] calldata assTokenAddressList) external nonReentrant onlyRole(BOT_ROLE) {\\n        uint256 length = assTokenAddressList.length;\\n        for (UC i = ZERO; i < uc(length); i = i + ONE) {\\n            address assTokenAddress = assTokenAddressList[i.into()];\\n            Token storage token = supportAssToken[assTokenAddress];\\n\\n            if (token.transferToCeffuEnabled) {\\n                require(token.ceffuAddress != address(0), \\\"ceffuAddress cannot be a zero address\\\");\\n                uint256 amount = _transferToCeffu(token.ceffuAddress, token.sourceTokenAddress);\\n                emit TransferToCeffu(token.sourceTokenAddress, amount, token.ceffuAddress);\\n            }\\n        }\\n    }\\n\\n    function uploadExchangeRate(ExchangeRateInfo[] calldata exchangeRateInfoList) external nonReentrant onlyRole(BOT_ROLE) {\\n        uint256 length = exchangeRateInfoList.length;\\n        for (UC i = ZERO; i < uc(length); i = i + ONE) {\\n            ExchangeRateInfo calldata exchangeRateInfo = exchangeRateInfoList[i.into()];\\n\\n            Token storage token = supportAssToken[exchangeRateInfo.assTokenAddress];\\n            require(token.assTokenAddress != address(0), \\\"not exist\\\");\\n\\n            token.assToSourceExchangeRate = exchangeRateInfo.assToSourceExchangeRate;\\n            token.exchangeRateExpiredTimestamp = exchangeRateInfo.exchangeRateExpiredTimestamp;\\n            emit UploadExchangeRate(token.assTokenAddress, token.assToSourceExchangeRate, token.exchangeRateExpiredTimestamp);\\n        }\\n    }\\n\\n    function requestWithdraw(address assTokenAddress, uint256 assTokenAmount) external nonReentrant whenNotPaused {\\n        require(assTokenAddress != address(0), \\\"sourceTokenAddress cannot be a zero address\\\");\\n        require(assTokenAmount > 0, \\\"invalid amount\\\");\\n\\n        Token storage token = supportAssToken[assTokenAddress];\\n        require(token.assTokenAddress != address(0), \\\"currency not support\\\");\\n        require(token.withdrawEnabled == true, \\\"pause withdraw\\\");\\n\\n        uint256 assTokenBalance = IERC20(assTokenAddress).balanceOf(msg.sender);\\n        require(assTokenAmount <= assTokenBalance, \\\"insufficient balance\\\");\\n\\n        assTokenAmount = _lock(msg.sender, assTokenAddress, assTokenAmount);\\n\\n        requestWithdrawMaxNo += 1;\\n        RequestWithdrawInfo memory requestWithdrawInfo = RequestWithdrawInfo({\\n            assTokenAddress: assTokenAddress,\\n            assTokenAmount: assTokenAmount,\\n            applyTimestamp: block.timestamp,\\n            sourceTokenAmount: 0,\\n            canClaimWithdraw: false\\n        });\\n        requestWithdraws[msg.sender][requestWithdrawMaxNo] = requestWithdrawInfo;\\n\\n        emit RequestWithdraw(msg.sender, assTokenAddress, assTokenAmount, requestWithdrawMaxNo);\\n    }\\n\\n    function distributeWithdraw(DistributeWithdrawInfo[] calldata distributeWithdrawInfoList) external nonReentrant whenNotPaused onlyRole(BOT_ROLE) {\\n        uint256 length = distributeWithdrawInfoList.length;\\n        for (UC i = ZERO; i < uc(length); i = i + ONE) {\\n            DistributeWithdrawInfo calldata distributeWithdrawInfo = distributeWithdrawInfoList[i.into()];\\n            Token storage token = supportAssToken[distributeWithdrawInfo.assTokenAddress];\\n            require(token.assTokenAddress != address(0), \\\"not exist\\\");\\n            require(token.withdrawEnabled == true, \\\"pause withdraw\\\");\\n\\n            RequestWithdrawInfo storage requestWithdrawInfo = requestWithdraws[distributeWithdrawInfo.receipt][distributeWithdrawInfo.requestWithdrawNo];\\n            require(requestWithdrawInfo.assTokenAddress != address(0), \\\"not exist request\\\");\\n            require(requestWithdrawInfo.assTokenAddress == distributeWithdrawInfo.assTokenAddress, \\\"unmatched request\\\");\\n            require(requestWithdrawInfo.canClaimWithdraw == false, \\\"can not claim\\\");\\n\\n            requestWithdrawInfo.sourceTokenAmount = distributeWithdrawInfo.sourceTokenAmount;\\n            requestWithdrawInfo.canClaimWithdraw = true;\\n\\n            IAss(token.assTokenAddress).burn(address(this), requestWithdrawInfo.assTokenAmount);\\n\\n            emit DistributeWithdraw(requestWithdrawInfo.assTokenAddress, token.sourceTokenAddress, requestWithdrawInfo.assTokenAmount, requestWithdrawInfo.sourceTokenAmount, distributeWithdrawInfo.requestWithdrawNo);\\n        }\\n    }\\n\\n    function claimWithdraw(uint256[] calldata requestWithdrawNos) external nonReentrant whenNotPaused {\\n        uint256 length = requestWithdrawNos.length;\\n        for (UC i = ZERO; i < uc(length); i = i + ONE) {\\n            uint256 requestWithdrawNo = requestWithdrawNos[i.into()];\\n            RequestWithdrawInfo storage requestWithdrawInfo = requestWithdraws[msg.sender][requestWithdrawNo];\\n            require(requestWithdrawInfo.assTokenAddress != address(0), \\\"not exist\\\");\\n            require(requestWithdrawInfo.canClaimWithdraw == true, \\\"can not claim\\\");\\n\\n            Token storage token = supportAssToken[requestWithdrawInfo.assTokenAddress];\\n            require(token.assTokenAddress != address(0), \\\"currency not support\\\");\\n            require(token.withdrawEnabled == true, \\\"pause withdraw\\\");\\n\\n            address assTokenAddress = requestWithdrawInfo.assTokenAddress;\\n            uint256 assTokenAmount = requestWithdrawInfo.assTokenAmount;\\n            uint256 sourceTokenAmount = requestWithdrawInfo.sourceTokenAmount;\\n\\n            delete requestWithdraws[msg.sender][requestWithdrawNo];\\n\\n            _withdraw(msg.sender, token.sourceTokenAddress, sourceTokenAmount);\\n\\n            emit ClaimWithdraw(msg.sender, assTokenAddress, token.sourceTokenAddress, assTokenAmount, sourceTokenAmount, requestWithdrawNo);\\n        }\\n    }\\n\\n    function balance(address currency) external view returns (uint256) {\\n        return IERC20(currency).balanceOf(address(this));\\n    }\\n\\n    function _transferToVault(address from, address token, uint256 amount) private returns (uint256){\\n        if (token != NATIVE_WRAPPED) {\\n            IERC20 erc20 = IERC20(token);\\n            uint256 before = erc20.balanceOf(address(this));\\n            erc20.safeTransferFrom(from, address(this), amount);\\n            return erc20.balanceOf(address(this)) - before;\\n        } else {\\n            require(msg.value >= amount, \\\"insufficient balance\\\");\\n            return amount;\\n        }\\n    }\\n\\n    function _lock(address from, address token, uint256 amount) private returns (uint256){\\n        IERC20 erc20 = IERC20(token);\\n        uint256 before = erc20.balanceOf(address(this));\\n        erc20.safeTransferFrom(from, address(this), amount);\\n        return erc20.balanceOf(address(this)) - before;\\n    }\\n\\n    function _transferToCeffu(address receipt, address token) private returns (uint256){\\n        if (token != NATIVE_WRAPPED) {\\n            uint256 amount = IERC20(token).balanceOf(address(this));\\n            if (amount <= 0) {\\n                return amount;\\n            }\\n            IERC20(token).safeTransfer(receipt, amount);\\n            return amount;\\n        } else {\\n            uint256 amount = address(this).balance;\\n            if (amount <= 0) {\\n                return amount;\\n            }\\n            payable(receipt).sendValue(amount);\\n            return amount;\\n        }\\n    }\\n\\n    function _withdraw(address receipt, address token, uint256 amount) private {\\n        if (token != NATIVE_WRAPPED) {\\n            IWithdrawVault(WITHDRAW_VAULT).transfer(receipt, token, amount);\\n        } else {\\n            IWithdrawVault(WITHDRAW_VAULT).transferNative(receipt, amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaec52f767264cd0e16c77c5aed4e33b84644c20f933deeef9bf0fa351944ead2\",\"license\":\"MIT\"},\"contracts/interface/IAss.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\ninterface IAss {\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address from, uint256 amount) external;\\n}\",\"keccak256\":\"0xf33d6a21ac1e4bd079039a159778d7936ce5c070a2496e84c9276befd6b51272\",\"license\":\"MIT\"},\"contracts/interface/IWithdrawVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.25;\\n\\ninterface IWithdrawVault {\\n\\n    event ReceiveETH(address indexed from, address indexed to, uint256 amount);\\n    event TransferNative(address receipt, uint256 amount);\\n    event Transfer(address receipt, address token, uint256 amount);\\n\\n    function transfer(address receipt, address token, uint256 amount) external;\\n\\n    function transferNative(address receipt, uint256 amount) external;\\n}\",\"keccak256\":\"0xdfc8f6451201ae3346f1872e4fee65e356f9cc1e3e3f1168b47944d6a0f57666\",\"license\":\"MIT\"},\"unchecked-counter/src/UC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.19;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                TYPE DEFINITION\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @notice Counter type that bypasses checked arithmetic, designed to be used in for loops.\\n/// @dev Here's an example:\\n///\\n/// ```\\n/// for (UC i = ZERO; i < uc(100); i = i + ONE) {\\n///   i.into(); // or `i.unwrap()`\\n/// }\\n/// ```\\ntype UC is uint256;\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                    CONSTANTS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n// Exports 1 as a typed constant.\\nUC constant ONE = UC.wrap(1);\\n\\n// Exports 0 as a typed constant.\\nUC constant ZERO = UC.wrap(0);\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                LOGIC FUNCTIONS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\nusing { add as +, lt as <, lte as <= } for UC global;\\n\\n/// @notice Sums up `x` and `y` without checked arithmetic.\\nfunction add(UC x, UC y) pure returns (UC) {\\n    unchecked {\\n        return UC.wrap(UC.unwrap(x) + UC.unwrap(y));\\n    }\\n}\\n\\n/// @notice Checks if `x` is lower than `y`.\\nfunction lt(UC x, UC y) pure returns (bool) {\\n    return UC.unwrap(x) < UC.unwrap(y);\\n}\\n\\n/// @notice Checks if `x` is lower than or equal to `y`.\\nfunction lte(UC x, UC y) pure returns (bool) {\\n    return UC.unwrap(x) <= UC.unwrap(y);\\n}\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                                CASTING FUNCTIONS\\n//////////////////////////////////////////////////////////////////////////*/\\n\\nusing { into, unwrap } for UC global;\\n\\n/// @notice Alias for the `UC.unwrap` function.\\nfunction into(UC x) pure returns (uint256 result) {\\n    result = UC.unwrap(x);\\n}\\n\\n/// @notice Alias for the `UC.wrap` function.\\nfunction uc(uint256 x) pure returns (UC result) {\\n    result = UC.wrap(x);\\n}\\n\\n/// @notice Alias for the `UC.unwrap` function.\\nfunction unwrap(UC x) pure returns (uint256 result) {\\n    result = UC.unwrap(x);\\n}\\n\\n/// @notice Alias for the `UC.wrap` function.\\nfunction wrap(uint256 x) pure returns (UC result) {\\n    result = UC.wrap(x);\\n}\\n\",\"keccak256\":\"0xbc1a5f62265ddbc9f9a2604898b39f51a6a67b8a805dff49c677f39f372e2713\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101003461028d57601f613bb838819003918201601f19168301926001600160401b039290918385118386101761029257816060928492604097885283398101031261028d5761004e816102a8565b906100668461005f602084016102a8565b92016102a8565b30608052916001600160a01b038082161561023a57808316156101e5578316156101925760c05260a05260e0527ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009081549060ff82851c1661018157808083160361013d575b83516138fb90816102bd8239608051818181611648015261173f015260a051818181610c6a015281816117720152611b62015260c051818181610219015281816107660152818161212701528181612cc101526134cc015260e051818181610333015281816104300152610ee10152f35b6001600160401b0319909116811790915581519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a13880806100cc565b835163f92ee8a960e01b8152600490fd5b845162461bcd60e51b815260206004820152602660248201527f77697468647261775661756c742063616e6e6f742062652061207a65726f206160448201526564647265737360d01b6064820152608490fd5b855162461bcd60e51b815260206004820152602860248201527f74696d656c6f636b416464726573732063616e6e6f742062652061207a65726f604482015267206164647265737360c01b6064820152608490fd5b855162461bcd60e51b815260206004820152602660248201527f6e6174697665577261707065642063616e6e6f742062652061207a65726f206160448201526564647265737360d01b6064820152608490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b038216820361028d5756fe608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a7146124cf57508063231965381461236f578063248a9ca3146123215780632852cce6146121f05780632f2ff15d1461214b578063362b67951461210757806336568abe146120a8578063389ed2671461206d578063397a1b2814611d855780633c3f1a1a14611c625780633e110bb114611c275780633f4ba83a14611b86578063431c183014611b4257806347e7ef2414611b0d5780634bb8fd3e146119a85780634f1ef286146116c257806352d1902d1461162d5780635c975abb146115eb57806375b238fc146115b05780638456cb59146115375780638f9e4779146114ba5780639010d07c1461145557806391d14854146113e8578063a217fddf146113cc578063ab59f53d14611134578063ad3cb1cc14611071578063b150377414611036578063b22ccd7614611018578063b7e0c50514610f05578063baaa3ed314610ec1578063c4d66de814610b61578063ca15c87314610b16578063d35d245614610810578063d547741f146107b0578063db6b524614610744578063e3d670d7146106c0578063e5facdf914610584578063e6160952146104e35763eb9259ef146101cc57600080fd5b34610429576020806003193601126104295760043567ffffffffffffffff8111610429576101fe9036906004016125db565b91610207612be1565b61020f612c3b565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169360005b81811061026b5760017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055005b610276818387612928565b35903360005260028086526040600020836000528652604060002085815416906102a1821515612740565b600160ff6102b882826004860154161515146129ad565b8360005260008a526102e9826040600020926102d88c8554161515612847565b600484015460081c16151514612892565b60006004868486015495015496338352808d52604083208a84528d5282604081209181835581878401558201558260038201550155019487865416908b82141560001461042e57887f000000000000000000000000000000000000000000000000000000000000000016803b15610429576040517fbeabacc80000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03939093166024840152604483018690526000908390606490829084905af1801561041d576001977fb143cbc1b45edd3fe39b60a0bb8aafb1e1d42da89e96e1aff4449ebdc37e48f2938b9261040e575b505b5416946104056040519283923396846040919493926060820195825260208201520152565b0390a40161023e565b6104179061260c565b386103de565b6040513d6000823e3d90fd5b600080fd5b7f000000000000000000000000000000000000000000000000000000000000000089169150813b15610429576040517f7d2e90c200000000000000000000000000000000000000000000000000000000815233600482015260248101869052916000908390604490829084905af1801561041d576001977fb143cbc1b45edd3fe39b60a0bb8aafb1e1d42da89e96e1aff4449ebdc37e48f2938b926104d4575b506103e0565b6104dd9061260c565b386104ce565b34610429576020366003190112610429576101206001600160a01b03806105086125a0565b16600052600060205260ff604060002082815416926001820154916002810154846004600384015493015494604051978852848116602089015260a01c16604087015260608601526080850152828216151560a0850152828260081c16151560c08501528160101c1660e084015260b01c161515610100820152f35b346104295760403660031901126104295761059d6125a0565b6105a56125cc565b6105ad6129f8565b60046001600160a01b03809316926105c684151561265e565b8360005260006020526105e26040600020918254161515612740565b019060ff825460081c16908015158215151461065657825461ff00191690151560081b61ff00161782557f68384b4f4b87956d2efbc57330ba1b694f41dd604449822dca247bebf7a5518c9160ff905460408051931515845260089190911c9190911615156020830152819081015b0390a2005b608460405162461bcd60e51b815260206004820152603660248201527f6e65775769746864726177456e61626c65642063616e206e6f7420626520657160448201527f75616c206f6c645769746864726177456e61626c6564000000000000000000006064820152fd5b3461042957602080600319360112610429576024816001600160a01b036106e56125a0565b16604051928380926370a0823160e01b82523060048301525afa90811561041d57600091610717575b50604051908152f35b90508181813d831161073d575b61072e8183612620565b8101031261042957518261070e565b503d610724565b600036600319011261042957610758612be1565b610760612c3b565b61078a347f0000000000000000000000000000000000000000000000000000000000000000612e4c565b60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055005b346104295760403660031901126104295761080e6004356107cf6125b6565b90806000527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052610809600160406000200154612b43565b612b88565b005b346104295760203660031901126104295767ffffffffffffffff806004351161042957366023600435011215610429576004356004013511610429573660246004356004013560071b6004350101116104295761086b612be1565b610873612c3b565b61087b612a8b565b60005b6004356004013581106108b15760017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055005b60248160071b6004350101906001600160a01b036108ce8361294e565b16600052600060205260406000206108f16001600160a01b038254161515612740565b60ff9061090b600183600484015460081c16151514612892565b6001600160a01b0361092660848560071b600435010161294e565b1660005260029182602052604060002090606491828660071b6004350101356000526020526040600020956001600160a01b03875416908115610ad3576109746001600160a01b039161294e565b1603610a90576001600487019161098f8354918216156129ad565b60448760071b6004350101358689015560ff19161790556001600160a01b0382541694600181015495803b15610429576040517f9dc29fac00000000000000000000000000000000000000000000000000000000815230600482015260248101979097526000908790604490829084905af191821561041d576001967f051fd1ff7b2b4fc684c771fea49f105616b277782f1b76f0dfb7aeba8532269993610a81575b50610a786001600160a01b038881855416960154169588840154930154926040519384938960071b60043501013591846040919493926060820195825260208201520152565b0390a30161087e565b610a8a9061260c565b87610a32565b5060405162461bcd60e51b815260206004820152601160248201527f756e6d61746368656420726571756573740000000000000000000000000000006044820152fd5b8360405162461bcd60e51b815260206004820152601160248201527f6e6f7420657869737420726571756573740000000000000000000000000000006044820152fd5b34610429576020366003190112610429576004356000527fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e823717059320006020526020604060002054604051908152f35b3461042957602036600319011261042957610b7a6125a0565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009081549060ff8260401c16159167ffffffffffffffff811680159081610eb9575b6001149081610eaf575b159081610ea6575b50610e7c5767ffffffffffffffff198116600117845582610e5d575b50610bf36135e9565b610bfb6135e9565b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300805460ff19169055610c2c6135e9565b610c346135e9565b610c3c6135e9565b610c446135e9565b60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00557f0000000000000000000000000000000000000000000000000000000000000000610c92816130b6565b610dfb575b50610ca181613163565b610d7a575b610caf81613231565b610cf8575b50610cbb57005b68ff00000000000000001981541690557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a1005b7f139c2898040ef16910dc9f44dc697df79363da767d8bc92f2e310312b816e46d6000527fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e82371705932000602052610d73906001600160a01b03167fca3aa861eb308f705e42f0c24b10f8140a2bbdb4a36861ee4d72375ef399c2bf613642565b5082610cb4565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756000527fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e82371705932000602052610df56001600160a01b0382167f46448fd7a7b40360a1323cb3199d0aafeb92ce905bb512a6bb7d3d3f685cf1b1613642565b50610ca6565b600080527fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e82371705932000602052610e56906001600160a01b03167f615f0f9e84155bea8cc509fe18befeb1baf65611e38a6ba60964480fb29dfd44613642565b5083610c97565b68ffffffffffffffffff19166801000000000000000117835583610bea565b60046040517ff92ee8a9000000000000000000000000000000000000000000000000000000008152fd5b90501585610bce565b303b159150610bc6565b849150610bbc565b346104295760003660031901126104295760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b34610429576020806003193601126104295767ffffffffffffffff600435818111610429573660238201121561042957806004013591821161042957602492606091366024606086028301011161042957610f5e612be1565b610f66612a8b565b60005b848110610f965760017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055005b6001906001600160a01b037f7e8886d8ada06aa154830d9afa9d83014f99e4b16b1578d06bd5802d666c43156040878402860183610fd58c830161294e565b16600052600088526003826000209485541694610ff3861515612740565b606460448401359384600284015501359182910155825191825288820152a201610f69565b34610429576000366003190112610429576020600354604051908152f35b346104295760003660031901126104295760206040517f6d5c9827c1f410bbb61d3b2a0a34b6b30492d9a1fd38588edca7ec4562ab9c9b8152f35b34610429576000366003190112610429576040516040810181811067ffffffffffffffff82111761111e57604052600581526020907f352e302e3000000000000000000000000000000000000000000000000000000060208201526040518092602082528251908160208401526000935b828510611105575050604092506000838284010152601f80199101168101030190f35b84810182015186860160400152938101938593506110e2565b634e487b7160e01b600052604160045260246000fd5b346104295760e03660031901126104295761114d6125a0565b6111556125b6565b6044356001600160a01b0380821693848303610429576084359283151584036104295760a4359182151583036104295760c4359081151582036104295784806111c1926111a06129f8565b16976111ad89151561265e565b16976111ba89151561278b565b15156126cf565b604051917f313ce5670000000000000000000000000000000000000000000000000000000083526020836004818b5afa92831561041d5760009361138c575b5061133261134e939488600052600060205261131c60406000209889549961122a8a8c1615612962565b8c60005260016020526112448a6040600020541615612962565b8b73ffffffffffffffffffffffffffffffffffffffff19809c1617815560018101988d8c8b5416178a556112b56004830197889075ffffffffffffffffffffffffffffffffffffffff00001975ffffffffffffffffffffffffffffffffffffffff000083549260101b169116179055565b7fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff74ff00000000000000000000000000000000000000008b549260a01b1691161789556305f5e10060028201556003606435910155849060ff801983541691151516179055565b825461ff00191690151560081b61ff0016178255565b9060ff60b01b1960ff60b01b835492151560b01b169116179055565b54166000526001602052816040600020918254161790557fdbf34b45b47a653cf4940cccbec765f72d4d63de3237306905bfc0ee28832362600080a3005b9092506020813d6020116113c4575b816113a860209383612620565b8101031261042957519160ff8316830361042957611332611200565b3d915061139b565b3461042957600036600319011261042957602060405160008152f35b34610429576040366003190112610429576114016125b6565b6004356000527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020526001600160a01b0360406000209116600052602052602060ff604060002054166040519015158152f35b34610429576040366003190112610429576004356000527fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e8237170593200060205260206001600160a01b036114aa60243560406000206135d1565b9190546040519260031b1c168152f35b346104295760403660031901126104295760a06114d56125a0565b6001600160a01b038091166000526002602052604060002060243560005260205260406000209081541690600181015490600281015460ff60046003840154930154169260405194855260208501526040840152606083015215156080820152f35b3461042957600036600319011261042957611550612ae7565b611558612c3b565b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300600160ff198254161790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a1005b346104295760003660031901126104295760206040517fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217758152f35b3461042957600036600319011261042957602060ff7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f0330054166040519015158152f35b34610429576000366003190112610429576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036116985760206040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b60046040517fe07c8dba000000000000000000000000000000000000000000000000000000008152fd5b6040366003190112610429576116d66125a0565b602490813567ffffffffffffffff811161042957366023820112156104295780600401359161170483612642565b6117116040519182612620565b83815260209384820193368783830101116104295781600092888893018737830101526001600160a01b03807f00000000000000000000000000000000000000000000000000000000000000001680301490811561197a575b5061169857807f000000000000000000000000000000000000000000000000000000000000000016330361193757821693604051907f52d1902d0000000000000000000000000000000000000000000000000000000082528082600481895afa918291600093611907575b50506117f257858560405190634c9c8ce360e01b82526004820152fd5b8490867f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc918281036118d95750843b156118c357508173ffffffffffffffffffffffffffffffffffffffff19825416179055604051907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a28151156118905750600061080e9381925190845af461188a61348c565b9161385c565b925050503461189b57005b807fb398979f0000000000000000000000000000000000000000000000000000000060049252fd5b8260405190634c9c8ce360e01b82526004820152fd5b604051907faa1d49a40000000000000000000000000000000000000000000000000000000082526004820152fd5b9080929350813d8311611930575b61191f8183612620565b8101031261042957519087806117d5565b503d611915565b606485600d886040519262461bcd60e51b845260048401528201527f6f6e6c792074696d656c6f636b000000000000000000000000000000000000006044820152fd5b9050817f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc541614158761176a565b34610429576040366003190112610429576119c16125a0565b6119c96125cc565b6119d16129f8565b60046001600160a01b03809316926119ea84151561265e565b836000526000602052611a066040600020918254161515612740565b019060ff825460b01c169080151582151514611a7d57825460ff60b01b191690151560b01b60ff60b01b161782557fdf274bfbbe5c8156b17d1c4f0eb5e3571b7c7e590046f5c086168e96edd77d5c9160ff905460408051931515845260b09190911c919091161515602083015281908101610651565b60a460405162461bcd60e51b815260206004820152604460248201527f6e65775472616e73666572546f4365666675456e61626c65642063616e206e6f60448201527f7420626520657175616c206f6c645472616e73666572546f4365666675456e6160648201527f626c6564000000000000000000000000000000000000000000000000000000006084820152fd5b346104295760403660031901126104295761078a611b296125a0565b611b31612be1565b611b39612c3b565b60243590612e4c565b346104295760003660031901126104295760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461042957600036600319011261042957611b9f612ae7565b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300805460ff811615611bfd5760ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1005b60046040517f8dfc202b000000000000000000000000000000000000000000000000000000008152fd5b346104295760203660031901126104295760206001600160a01b0380611c4b6125a0565b166000526001825260406000205416604051908152f35b34610429576020806003193601126104295760043567ffffffffffffffff811161042957611c949036906004016125db565b9091611c9e612be1565b611ca6612a8b565b60005b828110611cd65760017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055005b6001906001600160a01b0380611cf5611cf084888a612928565b61294e565b1660005260008452604060002090600482019182549060ff8260b01c16611d21575b5050505001611ca9565b8260409281611d6a897fd560b537bb03a2e10775ff1c5992f0ba20cf0bdacefb10c30c86fc69e9d6fc8297601094851c1695611d5e8715156126cf565b01948286541690612cb3565b9354169554901c16825191825287820152a285808080611d17565b3461042957604036600319011261042957611d9e6125a0565b6024908135611dab612be1565b611db3612c3b565b6001600160a01b0380921692611dca84151561278b565b611dd58215156127fc565b8360005260209160008352611e0a600160ff60046040600020611dfc898254161515612847565b015460081c16151514612892565b604051906370a0823160e01b91828152336004820152848185818a5afa801561041d5760009061203e575b611e4291508211156128dd565b60405190828252306004830152848285818a5afa91821561041d5760009261200d575b50611e729030338961342f565b60405191825230600483015283828481895afa801561041d57600090611fde575b611e9d9250612c90565b926003549060018201809211611fc957816003556040519260a084019084821067ffffffffffffffff831117611fb5575091600491611f5c949360405287845285840187815260408501906000825260608601924284526080870194600086523360005260028a526040600020906000528952604060002096511673ffffffffffffffffffffffffffffffffffffffff1987541617865551600186015551600285015551600384015551151591019060ff801983541691151516179055565b600354906040519283528201527f446a76a57918c9a651f82cff9087fe2b56dea597ac08fa6c73eaade1585ae77a60403392a360017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055005b634e487b7160e01b60005260416004526000fd5b82634e487b7160e01b60005260116004526000fd5b508382813d8311612006575b611ff48183612620565b8101031261042957611e9d9151611e93565b503d611fea565b9091508481813d8311612037575b6120258183612620565b81010312610429575190611e72611e65565b503d61201b565b508481813d8311612066575b6120548183612620565b8101031261042957611e429051611e35565b503d61204a565b346104295760003660031901126104295760206040517f139c2898040ef16910dc9f44dc697df79363da767d8bc92f2e310312b816e46d8152f35b34610429576040366003190112610429576120c16125b6565b336001600160a01b038216036120dd5761080e90600435612b88565b60046040517f6697b232000000000000000000000000000000000000000000000000000000008152fd5b346104295760003660031901126104295760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b34610429576040366003190112610429576004356121676125b6565b816000527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020526121a0600160406000200154612b43565b6121aa81836132ff565b6121b057005b61080e916000527fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e823717059320006020526001600160a01b036040600020911690613642565b34610429576040366003190112610429576122096125a0565b6122116125cc565b6122196129f8565b60046001600160a01b038093169261223284151561265e565b83600052600060205261224e6040600020918254161515612740565b019060ff82541690801515821515146122b7578261229b60ff927f19102580093552aa222614ea7ccc7e4ebc532ec2abe5be2e5557a5277b85fb1d959060ff801983541691151516179055565b5460408051931515845291161515602083015281908101610651565b608460405162461bcd60e51b815260206004820152603460248201527f6e65774465706f736974456e61626c65642063616e206e6f742062652065717560448201527f616c206f6c644465706f736974456e61626c65640000000000000000000000006064820152fd5b34610429576020366003190112610429576004356000527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020526020600160406000200154604051908152f35b34610429576040366003190112610429576123886125a0565b6123906125b6565b906123996129f8565b6001600160a01b03809116916123b083151561265e565b8181166123be8115156126cf565b836000526000602052600460406000206123dc858254161515612740565b019280845460101c1691821461246557836124536040947fafef0c18004dea071236bb971e116c885cd7e4816842197e0169fba876230848969075ffffffffffffffffffffffffffffffffffffffff00001975ffffffffffffffffffffffffffffffffffffffff000083549260101b169116179055565b5460101c1682519182526020820152a2005b608460405162461bcd60e51b815260206004820152603060248201527f6e65774365666675416464726573732063616e206e6f7420626520657175616c60448201527f206f6c64436566667541646472657373000000000000000000000000000000006064820152fd5b3461042957602036600319011261042957600435907fffffffff00000000000000000000000000000000000000000000000000000000821680920361042957817f5a05180f0000000000000000000000000000000000000000000000000000000060209314908115612543575b5015158152f35b7f7965db0b00000000000000000000000000000000000000000000000000000000811491508115612576575b508361253c565b7f01ffc9a7000000000000000000000000000000000000000000000000000000009150148361256f565b600435906001600160a01b038216820361042957565b602435906001600160a01b038216820361042957565b60243590811515820361042957565b9181601f840112156104295782359167ffffffffffffffff8311610429576020808501948460051b01011161042957565b67ffffffffffffffff811161111e57604052565b90601f8019910116810190811067ffffffffffffffff82111761111e57604052565b67ffffffffffffffff811161111e57601f01601f191660200190565b1561266557565b608460405162461bcd60e51b815260206004820152602860248201527f617373546f6b656e416464726573732063616e6e6f742062652061207a65726f60448201527f20616464726573730000000000000000000000000000000000000000000000006064820152fd5b156126d657565b608460405162461bcd60e51b815260206004820152602560248201527f6365666675416464726573732063616e6e6f742062652061207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152fd5b1561274757565b606460405162461bcd60e51b815260206004820152600960248201527f6e6f7420657869737400000000000000000000000000000000000000000000006044820152fd5b1561279257565b608460405162461bcd60e51b815260206004820152602b60248201527f736f75726365546f6b656e416464726573732063616e6e6f742062652061207a60448201527f65726f20616464726573730000000000000000000000000000000000000000006064820152fd5b1561280357565b606460405162461bcd60e51b815260206004820152600e60248201527f696e76616c696420616d6f756e740000000000000000000000000000000000006044820152fd5b1561284e57565b606460405162461bcd60e51b815260206004820152601460248201527f63757272656e6379206e6f7420737570706f72740000000000000000000000006044820152fd5b1561289957565b606460405162461bcd60e51b815260206004820152600e60248201527f70617573652077697468647261770000000000000000000000000000000000006044820152fd5b156128e457565b606460405162461bcd60e51b815260206004820152601460248201527f696e73756666696369656e742062616c616e63650000000000000000000000006044820152fd5b91908110156129385760051b0190565b634e487b7160e01b600052603260045260246000fd5b356001600160a01b03811681036104295790565b1561296957565b606460405162461bcd60e51b815260206004820152600d60248201527f6475706c696361746520616464000000000000000000000000000000000000006044820152fd5b156129b457565b606460405162461bcd60e51b815260206004820152600d60248201527f63616e206e6f7420636c61696d000000000000000000000000000000000000006044820152fd5b3360009081527fb16e88c42fd4e48df2dd6a2eabd6bc9aec654ec170056b470819f8892cc6431c60205260409020547fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217759060ff1615612a545750565b604490604051907fe2517d3f0000000000000000000000000000000000000000000000000000000082523360048301526024820152fd5b3360009081527f36130197f7aaaea25e2f7618ed3461508f72f582ad6fcbc07c16456fa5ee4bf760205260409020547f6d5c9827c1f410bbb61d3b2a0a34b6b30492d9a1fd38588edca7ec4562ab9c9b9060ff1615612a545750565b3360009081527f85aa68ae9688c2bba3dc27a57a38bf2786c03751927fe89ecfd8b396d55ff13360205260409020547f139c2898040ef16910dc9f44dc697df79363da767d8bc92f2e310312b816e46d9060ff1615612a545750565b806000527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680060205260406000203360005260205260ff6040600020541615612a545750565b612b928282613399565b9182612b9d57505090565b612bdd916000527fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e823717059320006020526001600160a01b0360406000209116906136cc565b5090565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f006002815414612c115760029055565b60046040517f3ee5aeb5000000000000000000000000000000000000000000000000000000008152fd5b60ff7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033005416612c6657565b60046040517fd93c0665000000000000000000000000000000000000000000000000000000008152fd5b91908203918211612c9d57565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03918216917f000000000000000000000000000000000000000000000000000000000000000081168314612dc05750604051916370a0823160e01b8352306004840152602083602481845afa92831561041d57600093612d89575b5082908115612d83576040517fa9059cbb0000000000000000000000000000000000000000000000000000000060208201526001600160a01b0390931660248401526044830191909152612d809190612d7b82606481015b03601f198101845283612620565b6137bc565b90565b50505090565b90926020823d602011612db8575b81612da460209383612620565b81010312612db55750519138612d15565b80fd5b3d9150612d97565b4792508215612e4757824710612e1757600080848194938294165af1612de461348c565b5015612ded5790565b60046040517f1425ea42000000000000000000000000000000000000000000000000000000008152fd5b60246040517fcd786059000000000000000000000000000000000000000000000000000000008152306004820152fd5b505090565b6001600160a01b039081811691612e6483151561278b565b612e6f8415156127fc565b600091838352600160205260409180838520541695612e8f871515612847565b8685528460205283852090600493600160ff86850154161515036130735760038301544210156130305790612ec491336134bc565b946a52b7d2dcc80cd2e40000009788870298878a04148715171561301d57600283019889549060ff600186015460a01c16604d811161300a57600a0a91828102928184041490151715612ff7578115612fe4570494813b15612fe05786517f40c10f1900000000000000000000000000000000000000000000000000000000815233918101918252602082018790529291829184919082908490829060400103925af1908115612fd55750917fdc3f9f32b7ca52cfc67f1424b7cbe4b03f56ef295e7fedea895aec6ae7436ada95949391612fc193612fc6575b505416965492519283923396846040919493926060820195825260208201520152565b0390a4565b612fcf9061260c565b38612f9e565b8651903d90823e3d90fd5b8280fd5b602484601289634e487b7160e01b835252fd5b602484601189634e487b7160e01b835252fd5b60248560118a634e487b7160e01b835252fd5b602482601187634e487b7160e01b835252fd5b606485602088519162461bcd60e51b8352820152601560248201527f65786368616e67652072617465206578706972656400000000000000000000006044820152fd5b606485602088519162461bcd60e51b8352820152600d60248201527f7061757365206465706f736974000000000000000000000000000000000000006044820152fd5b6001600160a01b031660008181527fb7db2dd08fcb62d0c9e08c51941cae53c267786a0b75803fb7960902fc8ef97d60205260408120549091907f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268009060ff16612e47578280526020526040822081835260205260408220600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a4600190565b6001600160a01b031660008181527fb16e88c42fd4e48df2dd6a2eabd6bc9aec654ec170056b470819f8892cc6431c60205260408120549091907fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775907f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268009060ff16612d83578184526020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b6001600160a01b031660008181527f85aa68ae9688c2bba3dc27a57a38bf2786c03751927fe89ecfd8b396d55ff13360205260408120549091907f139c2898040ef16910dc9f44dc697df79363da767d8bc92f2e310312b816e46d907f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268009060ff16612d83578184526020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b906000918083527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800806020526001600160a01b036040852093169283855260205260ff60408520541615600014612d83578184526020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b906000918083527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800806020526001600160a01b036040852093169283855260205260ff604085205416600014612d8357818452602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4600190565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000060208201526001600160a01b039283166024820152929091166044830152606482019290925261348a91612d7b8260848101612d6d565b565b3d156134b7573d9061349d82612642565b916134ab6040519384612620565b82523d6000602084013e565b606090565b6001600160a01b039182169290917f00000000000000000000000000000000000000000000000000000000000000001683146135c157604051906370a0823160e01b8083523060048401526020918284602481895afa93841561041d5760009461358e575b506135319083949530908861342f565b60246040518096819382523060048301525afa90811561041d5760009161355e575b50612d809250612c90565b905082813d8311613587575b6135748183612620565b8101031261042957612d80915138613553565b503d61356a565b909280945081813d83116135ba575b6135a78183612620565b8101031261042957519291613531613521565b503d61359d565b809250612d8091503410156128dd565b80548210156129385760005260206000200190600090565b60ff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460401c161561361857565b60046040517fd7e6bcf8000000000000000000000000000000000000000000000000000000008152fd5b919060018301600090828252806020526040822054156000146136c657845494680100000000000000008610156136b257836136a261368b886001604098999a018555846135d1565b819391549060031b91821b91600019901b19161790565b9055549382526020522055600190565b602483634e487b7160e01b81526041600452fd5b50925050565b906001820190600092818452826020526040842054908115156000146137b557600019918083018181116137a15782549084820191821161378d57818103613758575b505050805480156137445782019161372783836135d1565b909182549160031b1b191690555582526020526040812055600190565b602486634e487b7160e01b81526031600452fd5b61377861376861368b93866135d1565b90549060031b1c928392866135d1565b9055865284602052604086205538808061370f565b602488634e487b7160e01b81526011600452fd5b602487634e487b7160e01b81526011600452fd5b5050505090565b6001600160a01b0316906137e7600080836020829551910182875af16137e061348c565b908461385c565b908151918215159283613830575b5050506137ff5750565b602490604051907f5274afe70000000000000000000000000000000000000000000000000000000082526004820152fd5b819293509060209181010312613858576020015190811591821503612db557503880806137f5565b5080fd5b906138715750805115612ded57805190602001fd5b815115806138bc575b613882575090565b6024906001600160a01b03604051917f9996b315000000000000000000000000000000000000000000000000000000008352166004820152fd5b50803b1561387a56fea2646970667358221220351f63e184f6bd24b8f98c22dc4fe9d63d13d5729de476f03f251333f9ca8bcb64736f6c63430008190033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a7146124cf57508063231965381461236f578063248a9ca3146123215780632852cce6146121f05780632f2ff15d1461214b578063362b67951461210757806336568abe146120a8578063389ed2671461206d578063397a1b2814611d855780633c3f1a1a14611c625780633e110bb114611c275780633f4ba83a14611b86578063431c183014611b4257806347e7ef2414611b0d5780634bb8fd3e146119a85780634f1ef286146116c257806352d1902d1461162d5780635c975abb146115eb57806375b238fc146115b05780638456cb59146115375780638f9e4779146114ba5780639010d07c1461145557806391d14854146113e8578063a217fddf146113cc578063ab59f53d14611134578063ad3cb1cc14611071578063b150377414611036578063b22ccd7614611018578063b7e0c50514610f05578063baaa3ed314610ec1578063c4d66de814610b61578063ca15c87314610b16578063d35d245614610810578063d547741f146107b0578063db6b524614610744578063e3d670d7146106c0578063e5facdf914610584578063e6160952146104e35763eb9259ef146101cc57600080fd5b34610429576020806003193601126104295760043567ffffffffffffffff8111610429576101fe9036906004016125db565b91610207612be1565b61020f612c3b565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169360005b81811061026b5760017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055005b610276818387612928565b35903360005260028086526040600020836000528652604060002085815416906102a1821515612740565b600160ff6102b882826004860154161515146129ad565b8360005260008a526102e9826040600020926102d88c8554161515612847565b600484015460081c16151514612892565b60006004868486015495015496338352808d52604083208a84528d5282604081209181835581878401558201558260038201550155019487865416908b82141560001461042e57887f000000000000000000000000000000000000000000000000000000000000000016803b15610429576040517fbeabacc80000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03939093166024840152604483018690526000908390606490829084905af1801561041d576001977fb143cbc1b45edd3fe39b60a0bb8aafb1e1d42da89e96e1aff4449ebdc37e48f2938b9261040e575b505b5416946104056040519283923396846040919493926060820195825260208201520152565b0390a40161023e565b6104179061260c565b386103de565b6040513d6000823e3d90fd5b600080fd5b7f000000000000000000000000000000000000000000000000000000000000000089169150813b15610429576040517f7d2e90c200000000000000000000000000000000000000000000000000000000815233600482015260248101869052916000908390604490829084905af1801561041d576001977fb143cbc1b45edd3fe39b60a0bb8aafb1e1d42da89e96e1aff4449ebdc37e48f2938b926104d4575b506103e0565b6104dd9061260c565b386104ce565b34610429576020366003190112610429576101206001600160a01b03806105086125a0565b16600052600060205260ff604060002082815416926001820154916002810154846004600384015493015494604051978852848116602089015260a01c16604087015260608601526080850152828216151560a0850152828260081c16151560c08501528160101c1660e084015260b01c161515610100820152f35b346104295760403660031901126104295761059d6125a0565b6105a56125cc565b6105ad6129f8565b60046001600160a01b03809316926105c684151561265e565b8360005260006020526105e26040600020918254161515612740565b019060ff825460081c16908015158215151461065657825461ff00191690151560081b61ff00161782557f68384b4f4b87956d2efbc57330ba1b694f41dd604449822dca247bebf7a5518c9160ff905460408051931515845260089190911c9190911615156020830152819081015b0390a2005b608460405162461bcd60e51b815260206004820152603660248201527f6e65775769746864726177456e61626c65642063616e206e6f7420626520657160448201527f75616c206f6c645769746864726177456e61626c6564000000000000000000006064820152fd5b3461042957602080600319360112610429576024816001600160a01b036106e56125a0565b16604051928380926370a0823160e01b82523060048301525afa90811561041d57600091610717575b50604051908152f35b90508181813d831161073d575b61072e8183612620565b8101031261042957518261070e565b503d610724565b600036600319011261042957610758612be1565b610760612c3b565b61078a347f0000000000000000000000000000000000000000000000000000000000000000612e4c565b60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055005b346104295760403660031901126104295761080e6004356107cf6125b6565b90806000527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800602052610809600160406000200154612b43565b612b88565b005b346104295760203660031901126104295767ffffffffffffffff806004351161042957366023600435011215610429576004356004013511610429573660246004356004013560071b6004350101116104295761086b612be1565b610873612c3b565b61087b612a8b565b60005b6004356004013581106108b15760017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055005b60248160071b6004350101906001600160a01b036108ce8361294e565b16600052600060205260406000206108f16001600160a01b038254161515612740565b60ff9061090b600183600484015460081c16151514612892565b6001600160a01b0361092660848560071b600435010161294e565b1660005260029182602052604060002090606491828660071b6004350101356000526020526040600020956001600160a01b03875416908115610ad3576109746001600160a01b039161294e565b1603610a90576001600487019161098f8354918216156129ad565b60448760071b6004350101358689015560ff19161790556001600160a01b0382541694600181015495803b15610429576040517f9dc29fac00000000000000000000000000000000000000000000000000000000815230600482015260248101979097526000908790604490829084905af191821561041d576001967f051fd1ff7b2b4fc684c771fea49f105616b277782f1b76f0dfb7aeba8532269993610a81575b50610a786001600160a01b038881855416960154169588840154930154926040519384938960071b60043501013591846040919493926060820195825260208201520152565b0390a30161087e565b610a8a9061260c565b87610a32565b5060405162461bcd60e51b815260206004820152601160248201527f756e6d61746368656420726571756573740000000000000000000000000000006044820152fd5b8360405162461bcd60e51b815260206004820152601160248201527f6e6f7420657869737420726571756573740000000000000000000000000000006044820152fd5b34610429576020366003190112610429576004356000527fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e823717059320006020526020604060002054604051908152f35b3461042957602036600319011261042957610b7a6125a0565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a009081549060ff8260401c16159167ffffffffffffffff811680159081610eb9575b6001149081610eaf575b159081610ea6575b50610e7c5767ffffffffffffffff198116600117845582610e5d575b50610bf36135e9565b610bfb6135e9565b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300805460ff19169055610c2c6135e9565b610c346135e9565b610c3c6135e9565b610c446135e9565b60017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00557f0000000000000000000000000000000000000000000000000000000000000000610c92816130b6565b610dfb575b50610ca181613163565b610d7a575b610caf81613231565b610cf8575b50610cbb57005b68ff00000000000000001981541690557fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2602060405160018152a1005b7f139c2898040ef16910dc9f44dc697df79363da767d8bc92f2e310312b816e46d6000527fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e82371705932000602052610d73906001600160a01b03167fca3aa861eb308f705e42f0c24b10f8140a2bbdb4a36861ee4d72375ef399c2bf613642565b5082610cb4565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756000527fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e82371705932000602052610df56001600160a01b0382167f46448fd7a7b40360a1323cb3199d0aafeb92ce905bb512a6bb7d3d3f685cf1b1613642565b50610ca6565b600080527fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e82371705932000602052610e56906001600160a01b03167f615f0f9e84155bea8cc509fe18befeb1baf65611e38a6ba60964480fb29dfd44613642565b5083610c97565b68ffffffffffffffffff19166801000000000000000117835583610bea565b60046040517ff92ee8a9000000000000000000000000000000000000000000000000000000008152fd5b90501585610bce565b303b159150610bc6565b849150610bbc565b346104295760003660031901126104295760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b34610429576020806003193601126104295767ffffffffffffffff600435818111610429573660238201121561042957806004013591821161042957602492606091366024606086028301011161042957610f5e612be1565b610f66612a8b565b60005b848110610f965760017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055005b6001906001600160a01b037f7e8886d8ada06aa154830d9afa9d83014f99e4b16b1578d06bd5802d666c43156040878402860183610fd58c830161294e565b16600052600088526003826000209485541694610ff3861515612740565b606460448401359384600284015501359182910155825191825288820152a201610f69565b34610429576000366003190112610429576020600354604051908152f35b346104295760003660031901126104295760206040517f6d5c9827c1f410bbb61d3b2a0a34b6b30492d9a1fd38588edca7ec4562ab9c9b8152f35b34610429576000366003190112610429576040516040810181811067ffffffffffffffff82111761111e57604052600581526020907f352e302e3000000000000000000000000000000000000000000000000000000060208201526040518092602082528251908160208401526000935b828510611105575050604092506000838284010152601f80199101168101030190f35b84810182015186860160400152938101938593506110e2565b634e487b7160e01b600052604160045260246000fd5b346104295760e03660031901126104295761114d6125a0565b6111556125b6565b6044356001600160a01b0380821693848303610429576084359283151584036104295760a4359182151583036104295760c4359081151582036104295784806111c1926111a06129f8565b16976111ad89151561265e565b16976111ba89151561278b565b15156126cf565b604051917f313ce5670000000000000000000000000000000000000000000000000000000083526020836004818b5afa92831561041d5760009361138c575b5061133261134e939488600052600060205261131c60406000209889549961122a8a8c1615612962565b8c60005260016020526112448a6040600020541615612962565b8b73ffffffffffffffffffffffffffffffffffffffff19809c1617815560018101988d8c8b5416178a556112b56004830197889075ffffffffffffffffffffffffffffffffffffffff00001975ffffffffffffffffffffffffffffffffffffffff000083549260101b169116179055565b7fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff74ff00000000000000000000000000000000000000008b549260a01b1691161789556305f5e10060028201556003606435910155849060ff801983541691151516179055565b825461ff00191690151560081b61ff0016178255565b9060ff60b01b1960ff60b01b835492151560b01b169116179055565b54166000526001602052816040600020918254161790557fdbf34b45b47a653cf4940cccbec765f72d4d63de3237306905bfc0ee28832362600080a3005b9092506020813d6020116113c4575b816113a860209383612620565b8101031261042957519160ff8316830361042957611332611200565b3d915061139b565b3461042957600036600319011261042957602060405160008152f35b34610429576040366003190112610429576114016125b6565b6004356000527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020526001600160a01b0360406000209116600052602052602060ff604060002054166040519015158152f35b34610429576040366003190112610429576004356000527fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e8237170593200060205260206001600160a01b036114aa60243560406000206135d1565b9190546040519260031b1c168152f35b346104295760403660031901126104295760a06114d56125a0565b6001600160a01b038091166000526002602052604060002060243560005260205260406000209081541690600181015490600281015460ff60046003840154930154169260405194855260208501526040840152606083015215156080820152f35b3461042957600036600319011261042957611550612ae7565b611558612c3b565b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300600160ff198254161790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a1005b346104295760003660031901126104295760206040517fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217758152f35b3461042957600036600319011261042957602060ff7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f0330054166040519015158152f35b34610429576000366003190112610429576001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036116985760206040517f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8152f35b60046040517fe07c8dba000000000000000000000000000000000000000000000000000000008152fd5b6040366003190112610429576116d66125a0565b602490813567ffffffffffffffff811161042957366023820112156104295780600401359161170483612642565b6117116040519182612620565b83815260209384820193368783830101116104295781600092888893018737830101526001600160a01b03807f00000000000000000000000000000000000000000000000000000000000000001680301490811561197a575b5061169857807f000000000000000000000000000000000000000000000000000000000000000016330361193757821693604051907f52d1902d0000000000000000000000000000000000000000000000000000000082528082600481895afa918291600093611907575b50506117f257858560405190634c9c8ce360e01b82526004820152fd5b8490867f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc918281036118d95750843b156118c357508173ffffffffffffffffffffffffffffffffffffffff19825416179055604051907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b600080a28151156118905750600061080e9381925190845af461188a61348c565b9161385c565b925050503461189b57005b807fb398979f0000000000000000000000000000000000000000000000000000000060049252fd5b8260405190634c9c8ce360e01b82526004820152fd5b604051907faa1d49a40000000000000000000000000000000000000000000000000000000082526004820152fd5b9080929350813d8311611930575b61191f8183612620565b8101031261042957519087806117d5565b503d611915565b606485600d886040519262461bcd60e51b845260048401528201527f6f6e6c792074696d656c6f636b000000000000000000000000000000000000006044820152fd5b9050817f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc541614158761176a565b34610429576040366003190112610429576119c16125a0565b6119c96125cc565b6119d16129f8565b60046001600160a01b03809316926119ea84151561265e565b836000526000602052611a066040600020918254161515612740565b019060ff825460b01c169080151582151514611a7d57825460ff60b01b191690151560b01b60ff60b01b161782557fdf274bfbbe5c8156b17d1c4f0eb5e3571b7c7e590046f5c086168e96edd77d5c9160ff905460408051931515845260b09190911c919091161515602083015281908101610651565b60a460405162461bcd60e51b815260206004820152604460248201527f6e65775472616e73666572546f4365666675456e61626c65642063616e206e6f60448201527f7420626520657175616c206f6c645472616e73666572546f4365666675456e6160648201527f626c6564000000000000000000000000000000000000000000000000000000006084820152fd5b346104295760403660031901126104295761078a611b296125a0565b611b31612be1565b611b39612c3b565b60243590612e4c565b346104295760003660031901126104295760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461042957600036600319011261042957611b9f612ae7565b7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300805460ff811615611bfd5760ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1005b60046040517f8dfc202b000000000000000000000000000000000000000000000000000000008152fd5b346104295760203660031901126104295760206001600160a01b0380611c4b6125a0565b166000526001825260406000205416604051908152f35b34610429576020806003193601126104295760043567ffffffffffffffff811161042957611c949036906004016125db565b9091611c9e612be1565b611ca6612a8b565b60005b828110611cd65760017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055005b6001906001600160a01b0380611cf5611cf084888a612928565b61294e565b1660005260008452604060002090600482019182549060ff8260b01c16611d21575b5050505001611ca9565b8260409281611d6a897fd560b537bb03a2e10775ff1c5992f0ba20cf0bdacefb10c30c86fc69e9d6fc8297601094851c1695611d5e8715156126cf565b01948286541690612cb3565b9354169554901c16825191825287820152a285808080611d17565b3461042957604036600319011261042957611d9e6125a0565b6024908135611dab612be1565b611db3612c3b565b6001600160a01b0380921692611dca84151561278b565b611dd58215156127fc565b8360005260209160008352611e0a600160ff60046040600020611dfc898254161515612847565b015460081c16151514612892565b604051906370a0823160e01b91828152336004820152848185818a5afa801561041d5760009061203e575b611e4291508211156128dd565b60405190828252306004830152848285818a5afa91821561041d5760009261200d575b50611e729030338961342f565b60405191825230600483015283828481895afa801561041d57600090611fde575b611e9d9250612c90565b926003549060018201809211611fc957816003556040519260a084019084821067ffffffffffffffff831117611fb5575091600491611f5c949360405287845285840187815260408501906000825260608601924284526080870194600086523360005260028a526040600020906000528952604060002096511673ffffffffffffffffffffffffffffffffffffffff1987541617865551600186015551600285015551600384015551151591019060ff801983541691151516179055565b600354906040519283528201527f446a76a57918c9a651f82cff9087fe2b56dea597ac08fa6c73eaade1585ae77a60403392a360017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055005b634e487b7160e01b60005260416004526000fd5b82634e487b7160e01b60005260116004526000fd5b508382813d8311612006575b611ff48183612620565b8101031261042957611e9d9151611e93565b503d611fea565b9091508481813d8311612037575b6120258183612620565b81010312610429575190611e72611e65565b503d61201b565b508481813d8311612066575b6120548183612620565b8101031261042957611e429051611e35565b503d61204a565b346104295760003660031901126104295760206040517f139c2898040ef16910dc9f44dc697df79363da767d8bc92f2e310312b816e46d8152f35b34610429576040366003190112610429576120c16125b6565b336001600160a01b038216036120dd5761080e90600435612b88565b60046040517f6697b232000000000000000000000000000000000000000000000000000000008152fd5b346104295760003660031901126104295760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b34610429576040366003190112610429576004356121676125b6565b816000527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020526121a0600160406000200154612b43565b6121aa81836132ff565b6121b057005b61080e916000527fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e823717059320006020526001600160a01b036040600020911690613642565b34610429576040366003190112610429576122096125a0565b6122116125cc565b6122196129f8565b60046001600160a01b038093169261223284151561265e565b83600052600060205261224e6040600020918254161515612740565b019060ff82541690801515821515146122b7578261229b60ff927f19102580093552aa222614ea7ccc7e4ebc532ec2abe5be2e5557a5277b85fb1d959060ff801983541691151516179055565b5460408051931515845291161515602083015281908101610651565b608460405162461bcd60e51b815260206004820152603460248201527f6e65774465706f736974456e61626c65642063616e206e6f742062652065717560448201527f616c206f6c644465706f736974456e61626c65640000000000000000000000006064820152fd5b34610429576020366003190112610429576004356000527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268006020526020600160406000200154604051908152f35b34610429576040366003190112610429576123886125a0565b6123906125b6565b906123996129f8565b6001600160a01b03809116916123b083151561265e565b8181166123be8115156126cf565b836000526000602052600460406000206123dc858254161515612740565b019280845460101c1691821461246557836124536040947fafef0c18004dea071236bb971e116c885cd7e4816842197e0169fba876230848969075ffffffffffffffffffffffffffffffffffffffff00001975ffffffffffffffffffffffffffffffffffffffff000083549260101b169116179055565b5460101c1682519182526020820152a2005b608460405162461bcd60e51b815260206004820152603060248201527f6e65774365666675416464726573732063616e206e6f7420626520657175616c60448201527f206f6c64436566667541646472657373000000000000000000000000000000006064820152fd5b3461042957602036600319011261042957600435907fffffffff00000000000000000000000000000000000000000000000000000000821680920361042957817f5a05180f0000000000000000000000000000000000000000000000000000000060209314908115612543575b5015158152f35b7f7965db0b00000000000000000000000000000000000000000000000000000000811491508115612576575b508361253c565b7f01ffc9a7000000000000000000000000000000000000000000000000000000009150148361256f565b600435906001600160a01b038216820361042957565b602435906001600160a01b038216820361042957565b60243590811515820361042957565b9181601f840112156104295782359167ffffffffffffffff8311610429576020808501948460051b01011161042957565b67ffffffffffffffff811161111e57604052565b90601f8019910116810190811067ffffffffffffffff82111761111e57604052565b67ffffffffffffffff811161111e57601f01601f191660200190565b1561266557565b608460405162461bcd60e51b815260206004820152602860248201527f617373546f6b656e416464726573732063616e6e6f742062652061207a65726f60448201527f20616464726573730000000000000000000000000000000000000000000000006064820152fd5b156126d657565b608460405162461bcd60e51b815260206004820152602560248201527f6365666675416464726573732063616e6e6f742062652061207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152fd5b1561274757565b606460405162461bcd60e51b815260206004820152600960248201527f6e6f7420657869737400000000000000000000000000000000000000000000006044820152fd5b1561279257565b608460405162461bcd60e51b815260206004820152602b60248201527f736f75726365546f6b656e416464726573732063616e6e6f742062652061207a60448201527f65726f20616464726573730000000000000000000000000000000000000000006064820152fd5b1561280357565b606460405162461bcd60e51b815260206004820152600e60248201527f696e76616c696420616d6f756e740000000000000000000000000000000000006044820152fd5b1561284e57565b606460405162461bcd60e51b815260206004820152601460248201527f63757272656e6379206e6f7420737570706f72740000000000000000000000006044820152fd5b1561289957565b606460405162461bcd60e51b815260206004820152600e60248201527f70617573652077697468647261770000000000000000000000000000000000006044820152fd5b156128e457565b606460405162461bcd60e51b815260206004820152601460248201527f696e73756666696369656e742062616c616e63650000000000000000000000006044820152fd5b91908110156129385760051b0190565b634e487b7160e01b600052603260045260246000fd5b356001600160a01b03811681036104295790565b1561296957565b606460405162461bcd60e51b815260206004820152600d60248201527f6475706c696361746520616464000000000000000000000000000000000000006044820152fd5b156129b457565b606460405162461bcd60e51b815260206004820152600d60248201527f63616e206e6f7420636c61696d000000000000000000000000000000000000006044820152fd5b3360009081527fb16e88c42fd4e48df2dd6a2eabd6bc9aec654ec170056b470819f8892cc6431c60205260409020547fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217759060ff1615612a545750565b604490604051907fe2517d3f0000000000000000000000000000000000000000000000000000000082523360048301526024820152fd5b3360009081527f36130197f7aaaea25e2f7618ed3461508f72f582ad6fcbc07c16456fa5ee4bf760205260409020547f6d5c9827c1f410bbb61d3b2a0a34b6b30492d9a1fd38588edca7ec4562ab9c9b9060ff1615612a545750565b3360009081527f85aa68ae9688c2bba3dc27a57a38bf2786c03751927fe89ecfd8b396d55ff13360205260409020547f139c2898040ef16910dc9f44dc697df79363da767d8bc92f2e310312b816e46d9060ff1615612a545750565b806000527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b62680060205260406000203360005260205260ff6040600020541615612a545750565b612b928282613399565b9182612b9d57505090565b612bdd916000527fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e823717059320006020526001600160a01b0360406000209116906136cc565b5090565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f006002815414612c115760029055565b60046040517f3ee5aeb5000000000000000000000000000000000000000000000000000000008152fd5b60ff7fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f033005416612c6657565b60046040517fd93c0665000000000000000000000000000000000000000000000000000000008152fd5b91908203918211612c9d57565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03918216917f000000000000000000000000000000000000000000000000000000000000000081168314612dc05750604051916370a0823160e01b8352306004840152602083602481845afa92831561041d57600093612d89575b5082908115612d83576040517fa9059cbb0000000000000000000000000000000000000000000000000000000060208201526001600160a01b0390931660248401526044830191909152612d809190612d7b82606481015b03601f198101845283612620565b6137bc565b90565b50505090565b90926020823d602011612db8575b81612da460209383612620565b81010312612db55750519138612d15565b80fd5b3d9150612d97565b4792508215612e4757824710612e1757600080848194938294165af1612de461348c565b5015612ded5790565b60046040517f1425ea42000000000000000000000000000000000000000000000000000000008152fd5b60246040517fcd786059000000000000000000000000000000000000000000000000000000008152306004820152fd5b505090565b6001600160a01b039081811691612e6483151561278b565b612e6f8415156127fc565b600091838352600160205260409180838520541695612e8f871515612847565b8685528460205283852090600493600160ff86850154161515036130735760038301544210156130305790612ec491336134bc565b946a52b7d2dcc80cd2e40000009788870298878a04148715171561301d57600283019889549060ff600186015460a01c16604d811161300a57600a0a91828102928184041490151715612ff7578115612fe4570494813b15612fe05786517f40c10f1900000000000000000000000000000000000000000000000000000000815233918101918252602082018790529291829184919082908490829060400103925af1908115612fd55750917fdc3f9f32b7ca52cfc67f1424b7cbe4b03f56ef295e7fedea895aec6ae7436ada95949391612fc193612fc6575b505416965492519283923396846040919493926060820195825260208201520152565b0390a4565b612fcf9061260c565b38612f9e565b8651903d90823e3d90fd5b8280fd5b602484601289634e487b7160e01b835252fd5b602484601189634e487b7160e01b835252fd5b60248560118a634e487b7160e01b835252fd5b602482601187634e487b7160e01b835252fd5b606485602088519162461bcd60e51b8352820152601560248201527f65786368616e67652072617465206578706972656400000000000000000000006044820152fd5b606485602088519162461bcd60e51b8352820152600d60248201527f7061757365206465706f736974000000000000000000000000000000000000006044820152fd5b6001600160a01b031660008181527fb7db2dd08fcb62d0c9e08c51941cae53c267786a0b75803fb7960902fc8ef97d60205260408120549091907f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268009060ff16612e47578280526020526040822081835260205260408220600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a4600190565b6001600160a01b031660008181527fb16e88c42fd4e48df2dd6a2eabd6bc9aec654ec170056b470819f8892cc6431c60205260408120549091907fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775907f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268009060ff16612d83578184526020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b6001600160a01b031660008181527f85aa68ae9688c2bba3dc27a57a38bf2786c03751927fe89ecfd8b396d55ff13360205260408120549091907f139c2898040ef16910dc9f44dc697df79363da767d8bc92f2e310312b816e46d907f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b6268009060ff16612d83578184526020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b906000918083527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800806020526001600160a01b036040852093169283855260205260ff60408520541615600014612d83578184526020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b906000918083527f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800806020526001600160a01b036040852093169283855260205260ff604085205416600014612d8357818452602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4600190565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000060208201526001600160a01b039283166024820152929091166044830152606482019290925261348a91612d7b8260848101612d6d565b565b3d156134b7573d9061349d82612642565b916134ab6040519384612620565b82523d6000602084013e565b606090565b6001600160a01b039182169290917f00000000000000000000000000000000000000000000000000000000000000001683146135c157604051906370a0823160e01b8083523060048401526020918284602481895afa93841561041d5760009461358e575b506135319083949530908861342f565b60246040518096819382523060048301525afa90811561041d5760009161355e575b50612d809250612c90565b905082813d8311613587575b6135748183612620565b8101031261042957612d80915138613553565b503d61356a565b909280945081813d83116135ba575b6135a78183612620565b8101031261042957519291613531613521565b503d61359d565b809250612d8091503410156128dd565b80548210156129385760005260206000200190600090565b60ff7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a005460401c161561361857565b60046040517fd7e6bcf8000000000000000000000000000000000000000000000000000000008152fd5b919060018301600090828252806020526040822054156000146136c657845494680100000000000000008610156136b257836136a261368b886001604098999a018555846135d1565b819391549060031b91821b91600019901b19161790565b9055549382526020522055600190565b602483634e487b7160e01b81526041600452fd5b50925050565b906001820190600092818452826020526040842054908115156000146137b557600019918083018181116137a15782549084820191821161378d57818103613758575b505050805480156137445782019161372783836135d1565b909182549160031b1b191690555582526020526040812055600190565b602486634e487b7160e01b81526031600452fd5b61377861376861368b93866135d1565b90549060031b1c928392866135d1565b9055865284602052604086205538808061370f565b602488634e487b7160e01b81526011600452fd5b602487634e487b7160e01b81526011600452fd5b5050505090565b6001600160a01b0316906137e7600080836020829551910182875af16137e061348c565b908461385c565b908151918215159283613830575b5050506137ff5750565b602490604051907f5274afe70000000000000000000000000000000000000000000000000000000082526004820152fd5b819293509060209181010312613858576020015190811591821503612db557503880806137f5565b5080fd5b906138715750805115612ded57805190602001fd5b815115806138bc575b613882575090565b6024906001600160a01b03604051917f9996b315000000000000000000000000000000000000000000000000000000008352166004820152fd5b50803b1561387a56fea2646970667358221220351f63e184f6bd24b8f98c22dc4fe9d63d13d5729de476f03f251333f9ca8bcb64736f6c63430008190033",
  "devdoc": {
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "ERC1967InvalidImplementation(address)": [
        {
          "details": "The `implementation` of the proxy is invalid."
        }
      ],
      "ERC1967NonPayable()": [
        {
          "details": "An upgrade function sees `msg.value > 0` that may be lost."
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ],
      "UUPSUnauthorizedCallContext()": [
        {
          "details": "The call is from an unauthorized context."
        }
      ],
      "UUPSUnsupportedProxiableUUID(bytes32)": [
        {
          "details": "The storage `slot` is unsupported as a UUID."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "upgradeToAndCall(address,bytes)": {
        "custom:oz-upgrades-unsafe-allow-reachable": "delegatecall",
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11199,
        "contract": "contracts/Earn.sol:Earn",
        "label": "supportAssToken",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(Token)11161_storage)"
      },
      {
        "astId": 11203,
        "contract": "contracts/Earn.sol:Earn",
        "label": "supportSourceToken",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 11210,
        "contract": "contracts/Earn.sol:Earn",
        "label": "requestWithdraws",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(RequestWithdrawInfo)11188_storage))"
      },
      {
        "astId": 11212,
        "contract": "contracts/Earn.sol:Earn",
        "label": "requestWithdrawMaxNo",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(RequestWithdrawInfo)11188_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct Earn.RequestWithdrawInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(RequestWithdrawInfo)11188_storage)"
      },
      "t_mapping(t_address,t_struct(Token)11161_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Earn.Token)",
        "numberOfBytes": "32",
        "value": "t_struct(Token)11161_storage"
      },
      "t_mapping(t_uint256,t_struct(RequestWithdrawInfo)11188_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Earn.RequestWithdrawInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RequestWithdrawInfo)11188_storage"
      },
      "t_struct(RequestWithdrawInfo)11188_storage": {
        "encoding": "inplace",
        "label": "struct Earn.RequestWithdrawInfo",
        "members": [
          {
            "astId": 11179,
            "contract": "contracts/Earn.sol:Earn",
            "label": "assTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11181,
            "contract": "contracts/Earn.sol:Earn",
            "label": "assTokenAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11183,
            "contract": "contracts/Earn.sol:Earn",
            "label": "sourceTokenAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11185,
            "contract": "contracts/Earn.sol:Earn",
            "label": "applyTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 11187,
            "contract": "contracts/Earn.sol:Earn",
            "label": "canClaimWithdraw",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Token)11161_storage": {
        "encoding": "inplace",
        "label": "struct Earn.Token",
        "members": [
          {
            "astId": 11144,
            "contract": "contracts/Earn.sol:Earn",
            "label": "assTokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11146,
            "contract": "contracts/Earn.sol:Earn",
            "label": "sourceTokenAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 11148,
            "contract": "contracts/Earn.sol:Earn",
            "label": "sourceTokenDecimals",
            "offset": 20,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 11150,
            "contract": "contracts/Earn.sol:Earn",
            "label": "assToSourceExchangeRate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11152,
            "contract": "contracts/Earn.sol:Earn",
            "label": "exchangeRateExpiredTimestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 11154,
            "contract": "contracts/Earn.sol:Earn",
            "label": "depositEnabled",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 11156,
            "contract": "contracts/Earn.sol:Earn",
            "label": "withdrawEnabled",
            "offset": 1,
            "slot": "4",
            "type": "t_bool"
          },
          {
            "astId": 11158,
            "contract": "contracts/Earn.sol:Earn",
            "label": "ceffuAddress",
            "offset": 2,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 11160,
            "contract": "contracts/Earn.sol:Earn",
            "label": "transferToCeffuEnabled",
            "offset": 22,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}